services:
  # RabbitMQ service for message brokering
  # amqp:
  #   image: rabbitmq:3-management
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   healthcheck:
  #     test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
  #     interval: 5s
  #     retries: 10
  #     start_period: 10s
  #   restart: unless-stopped
  #   networks:
  #     - kong-net

  # PostgreSQL service for atomic microservices
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: esduser
      POSTGRES_PASSWORD: esduser
      POSTGRES_DB: default
    ports:
      - "5444:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U esduser -d default"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro

  # Customer microservice
  customer:
    build:
      context: ./customer
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    environment:
      - FLASK_APP=app.py
      - DB_HOST=host.docker.internal # Use host.docker.internal to connect to the host machine
      - DB_PORT=5444 # Host machine's PostgreSQL port
      - DB_NAME=customer_db
      - DB_USER=esduser
      - DB_PASSWORD=esduser
    depends_on:
      postgres:
        condition: service_healthy

  # Order microservice
  order:
    build:
      context: ./order
      dockerfile: Dockerfile
    ports:
      - "5002:5002"
    environment:
      - FLASK_APP=app.py
      - DB_HOST=host.docker.internal
      - DB_PORT=5444
      - DB_NAME=order_db
      - DB_USER=esduser
      - DB_PASSWORD=esduser
    depends_on:
      postgres:
        condition: service_healthy

  # Delivery microservice
  delivery:
    build:
      context: ./delivery
      dockerfile: Dockerfile
    ports:
      - "5003:5003"
    environment:
      - FLASK_APP=app.py
      - DB_HOST=host.docker.internal
      - DB_PORT=5444
      - DB_NAME=delivery_db
      - DB_USER=esduser
      - DB_PASSWORD=esduser
    depends_on:
      postgres:
        condition: service_healthy

  # Recommendation microservice
  recommendation:
    build:
      context: ./recommendation
      dockerfile: Dockerfile
    ports:
      - "5004:5004"
    environment:
      - FLASK_APP=app.py
      - DB_HOST=host.docker.internal
      - DB_PORT=5444
      - DB_NAME=recommendation_db
      - DB_USER=esduser
      - DB_PASSWORD=esduser
    depends_on:
      postgres:
        condition: service_healthy

  # # Make Purchase microservice
  # make_purchase:
  #   build:
  #     context: ./make_purchase # Path to the Make Purchase service's Dockerfile
  #     dockerfile: Dockerfile # Specify the Dockerfile to use
  #   ports:
  #     - "5005:5005" # Map port 5005 for the Make Purchase service
  #   environment:
  #     - FLASK_ENV=development # Set Flask environment to development
  #     - RUNNING_IN_DOCKER=true

  # # Make Refund microservice
  # make_refund:
  #   build:
  #     context: ./make_refund # Path to the Make Refund service's Dockerfile
  #     dockerfile: Dockerfile # Specify the Dockerfile to use
  #   ports:
  #     - "5006:5006" # Map port 5006 for the Make Refund service
  #   environment:
  #     - FLASK_ENV=development # Set Flask environment to development
  #     - RUNNING_IN_DOCKER=true

  # # Make Recommendation microservice
  # make_recommendation:
  #   build:
  #     context: ./make_recommendation # Path to the Make Recommendation service's Dockerfile
  #     dockerfile: Dockerfile # Specify the Dockerfile to use
  #   ports:
  #     - "5007:5007" # Map port 5007 for the Make Recommendation service
  #   environment:
  #     - FLASK_ENV=development # Set Flask environment to development
  #     - RUNNING_IN_DOCKER=true

volumes:
  postgres_data:
# networks:
#   kong-net:
