services:
  
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5673:5672"
      - "15673:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  amqp:
    build:
        context: ./amqp
    environment:
    - RABBITMQ_HOST=rabbitmq
    - RABBITMQ_PORT=5672 # Updated RABBITMQ_PORT for AMQP service
    healthcheck:
      test: ["CMD", "echo", "healthy"]
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      rabbitmq:
        condition: service_healthy
    

  # PostgreSQL service for atomic microservices
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: esduser
      POSTGRES_PASSWORD: esduser
      POSTGRES_DB: default
    ports:
      - "5444:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U esduser -d default"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Customer microservice
  customer:
    container_name: customer
    build:
      context: ./customer
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    environment:
      - FLASK_APP=app.py
      - DB_HOST=postgres.yanservers.com # Update to the external PostgreSQL server hostname
      - DB_PORT=5432       # Update to the external PostgreSQL server port
      - DB_NAME=customer_db
      - DB_USER=esduser
      - DB_PASSWORD=esduser
    # depends_on:
    #   postgres:
    #     condition: service_healthy

  # Order microservice
  order:
    container_name: order
    build:
      context: ./order
      dockerfile: Dockerfile
    ports:
      - "5002:5002"
    environment:
      - FLASK_APP=app.py
      - DB_HOST=postgres.yanservers.com # Update to the external PostgreSQL server hostname
      - DB_PORT=5432       # Update to the external PostgreSQL server port
      - DB_NAME=order_db
      - DB_USER=esduser
      - DB_PASSWORD=esduser
    volumes:
      - ./order:/app
    # depends_on:
    #   postgres:
    #     condition: service_healthy

  # Delivery microservice
  delivery:
    container_name: delivery
    build:
      context: ./delivery
      dockerfile: Dockerfile
    ports:
      - "5003:5003"
    environment:
      - FLASK_APP=app.py
      - DB_HOST=postgres.yanservers.com # Update to the external PostgreSQL server hostname
      - DB_PORT=5432       # Update to the external PostgreSQL server port
      - DB_NAME=delivery_db
      - DB_USER=esduser
      - DB_PASSWORD=esduser
    # depends_on:
    #   postgres:
    #     condition: service_healthy

  # Recommendation microservice
  recommendation:
    container_name: recommendation
    build:
      context: ./recommendation
      dockerfile: Dockerfile
    ports:
      - "5004:5004"
    environment:
      - FLASK_APP=app.py
      - DB_HOST=postgres.yanservers.com # Update to the external PostgreSQL server hostname
      - DB_PORT=5432       # Update to the external PostgreSQL server port
      - DB_NAME=recommendation_db
      - DB_USER=esduser
      - DB_PASSWORD=esduser
    # depends_on:
    #   postgres:
    #     condition: service_healthy

  cart:
    container_name: cart
    build:
      context: ./cart
      dockerfile: Dockerfile
    ports:
      - "5009:5009"
    environment:
      - FLASK_APP=cart.py
      - DB_HOST=postgres.yanservers.com # Update to the external PostgreSQL server hostname
      - DB_PORT=5432       # Update to the external PostgreSQL server port
      - DB_NAME=cart_db
      - DB_USER=esduser
      - DB_PASSWORD=esduser

  stripe:
    build:
      context: ./stripe
    env_file:
      - ./stripe/.env
    environment:
      - RABBITMQ_HOST=rabbitmq  
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - PYTHONWARNINGS=ignore
    ports:
      - "5000:5000"
    volumes:
      - ./stripe:/app
    depends_on:
      amqp:
        condition: service_healthy
  
  scenario3:
    build: 
      context: .  # Changed from ./scenario3 to .
      dockerfile: scenario3/Dockerfile
    ports:
      - "5006:5006"
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - STRIPE_SERVICE_URL=http://stripe:5000
      - FLASK_APP=makeRefunds.py
      - PYTHONPATH=/app
      - PYTHONWARNINGS=ignore
    volumes:
      - ./scenario3:/app
      - ./amqp:/app/amqp
    depends_on:
      - rabbitmq
      - stripe
      - customer  # Add dependency on customer service
      - order     # Add dependency on order service
      - delivery  # Add dependency on delivery service
    restart: unless-stopped

  email_service:
    build:
      context: .
      dockerfile: email_service/Dockerfile
    env_file:
      - ./email_service/.env
    environment:
      - PYTHONPATH=/app
      - FLASK_APP=email_service.app
      - PYTHONWARNINGS=ignore
    ports:
      - "5005:5005"
    volumes:
      - ./email_service:/app/email_service
      - ./amqp:/app/amqp
    depends_on:
      - rabbitmq

  
  # # Make Purchase microservice
  # make_purchase:
  #   build:
  #     context: ./make_purchase # Path to the Make Purchase service's Dockerfile
  #     dockerfile: Dockerfile # Specify the Dockerfile to use
  #   ports:
  #     - "5005:5005" # Map port 5005 for the Make Purchase service
  #   environment:
  #     - FLASK_ENV=development # Set Flask environment to development
  #     - RUNNING_IN_DOCKER=true

  # # Make Refund microservice
  # make_refund:
  #   build:
  #     context: ./make_refund # Path to the Make Refund service's Dockerfile
  #     dockerfile: Dockerfile # Specify the Dockerfile to use
  #   ports:
  #     - "5006:5006" # Map port 5006 for the Make Refund service
  #   environment:
  #     - FLASK_ENV=development # Set Flask environment to development
  #     - RUNNING_IN_DOCKER=true

  # # Make Recommendation microservice
  # make_recommendation:
  #   build:
  #     context: ./make_recommendation # Path to the Make Recommendation service's Dockerfile
  #     dockerfile: Dockerfile # Specify the Dockerfile to use
  #   ports:
  #     - "5007:5007" # Map port 5007 for the Make Recommendation service
  #   environment:
  #     - FLASK_ENV=development # Set Flask environment to development
  #     - RUNNING_IN_DOCKER=true
  kong:
    container_name: kong
    image: kong:3.9
    ports:
      - "8000:8000"  # Proxy port
      - "8001:8001"  # Admin API
      - "8002:8002"  # Kong Manager
    environment:
      KONG_DATABASE: "postgres"  # Changed from "off"
      KONG_PG_HOST: "postgres.yanservers.com"
      KONG_PG_PORT: "5432"
      KONG_PG_USER: "esduser"
      KONG_PG_PASSWORD: "esduser"
      KONG_PG_DATABASE: "kong"  # Default database name
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002"
      KONG_ADMIN_GUI_URL: "http://localhost:8002"
      KONG_PROXY_ACCESS_LOG: "/dev/stdout"
      KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
      KONG_PROXY_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_ERROR_LOG: "/dev/stderr"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
# networks:
#   kong-net:
