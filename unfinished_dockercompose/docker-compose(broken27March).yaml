services:
  # RabbitMQ service for message brokering
  # amqp:
  #   image: rabbitmq:3-management
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   healthcheck:
  #     test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
  #     interval: 5s
  #     retries: 10
  #     start_period: 10s
  #   restart: unless-stopped
  #   networks:
  #     - kong-net

  # # PostgreSQL service for atomic microservices
  # postgres:
  #   build:
  #     context: ./database # Path to the database directory
  #     dockerfile: Dockerfile # Specify the Dockerfile to use
  #   container_name: postgres
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: iloveESD123
  #     POSTGRES_MULTIPLE_DATABASES: customer_db, order_db, delivery_db, recommendation_db
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./database/create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
  #   ports:
  #     - "5433:5432" # Map local port 5433 to container port 5432
  #   healthcheck: # Needed to initialize all databases initially
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 5s
  #     retries: 10
  #     start_period: 10s
  #   restart: on-failure
  #   networks:
  #     - kong-net

  postgres_image:
    container_name: postgres_image
    image: postgres:latest
    environment:
      - POSTGRES_USER=esduser
      - POSTGRES_PASSWORD=esduser
      - POSTGRES_DB=default #optional (specify default database instead of $POSTGRES_DB)
    ports:
      - "5444:5432"
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # # Customer microservice
  # customer:
  #   build:
  #     context: ./customer # Path to the Customer service's Dockerfile
  #     dockerfile: Dockerfile # Specify the Dockerfile to use
  #   ports:
  #     - "5001:5001" # Map port 5001 for the Customer service
  #   environment:
  #     - FLASK_APP=app.py # Specify the Flask app file
  #     - RUNNING_IN_DOCKER=true
  #   depends_on:
  #     postgres_image:
  #       condition: service_healthy
  #   networks:
  #     - kong-net  # âœ… ADD THIS

  # # Order microservice
  # order:
  #   build:
  #     context: ./order # Path to the Order service's Dockerfile
  #     dockerfile: Dockerfile # Specify the Dockerfile to use
  #   restart: on-failure
  #   ports:
  #     - "5002:5002" # Map port 5002 for the Order service
  #   environment:
  #     - FLASK_APP=app.py # Specify the Flask app file
  #     - RUNNING_IN_DOCKER=true
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - kong-net

  # # Delivery microservice
  # delivery:
  #   build:
  #     context: ./delivery # Path to the Delivery service's Dockerfile
  #     dockerfile: Dockerfile # Specify the Dockerfile to use
  #   restart: on-failure
  #   ports:
  #     - "5003:5003" # Map port 5003 for the Delivery service
  #   environment:
  #     - FLASK_APP=app.py # Specify the Flask app file
  #     - RUNNING_IN_DOCKER=true
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - kong-net

  # # Recommendation microservice
  # recommendation:
  #   build:
  #     context: ./recommendation # Path to the Recommendation service's Dockerfile
  #     dockerfile: Dockerfile # Specify the Dockerfile to use
  #   restart: on-failure
  #   ports:
  #     - "5004:5004" # Map port 5004 for the Recommendation service
  #   environment:
  #     - FLASK_APP=app.py # Specify the Flask app file
  #     - RUNNING_IN_DOCKER=true
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - kong-net

  # # Make Purchase microservice
  # make_purchase:
  #   build:
  #     context: ./make_purchase # Path to the Make Purchase service's Dockerfile
  #     dockerfile: Dockerfile # Specify the Dockerfile to use
  #   ports:
  #     - "5005:5005" # Map port 5005 for the Make Purchase service
  #   environment:
  #     - FLASK_ENV=development # Set Flask environment to development
  #     - RUNNING_IN_DOCKER=true

  # # Make Refund microservice
  # make_refund:
  #   build:
  #     context: ./make_refund # Path to the Make Refund service's Dockerfile
  #     dockerfile: Dockerfile # Specify the Dockerfile to use
  #   ports:
  #     - "5006:5006" # Map port 5006 for the Make Refund service
  #   environment:
  #     - FLASK_ENV=development # Set Flask environment to development
  #     - RUNNING_IN_DOCKER=true

  # # Make Recommendation microservice
  # make_recommendation:
  #   build:
  #     context: ./make_recommendation # Path to the Make Recommendation service's Dockerfile
  #     dockerfile: Dockerfile # Specify the Dockerfile to use
  #   ports:
  #     - "5007:5007" # Map port 5007 for the Make Recommendation service
  #   environment:
  #     - FLASK_ENV=development # Set Flask environment to development
  #     - RUNNING_IN_DOCKER=true

volumes:
  postgres_data:

networks:
  kong-net:
